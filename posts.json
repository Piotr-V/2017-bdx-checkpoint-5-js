{"_id":{"$oid":"5965e46b0b42f3058c1ecb56"},"updatedAt":{"$date":"2017-07-12T08:57:15.537Z"},"createdAt":{"$date":"2017-07-12T08:57:15.537Z"},"title":"Exercice 1","content":"identifiant: pierre\nmdp: nbv\n\n\nCe qu’est un fork Github ?\nC'est une copie d'un repository présent sur gitHub. \nContrairement à un clone, cette copie reste totalement indépendante du repo original. Il est cependant possible de faire une pull-request, manipulation qui consiste à intégrer le travail fait sur la fork au repo initial. \n\nA quoi sert-il ?\nA travailler de manière indépendante sur un projet posté sur gitHub. \n\nQu’est-ce qu’une pull request ? Quel est l’intérêt ?\nLa pull request permet d'intégrer, à terme, le travail effectué sur la fork au projet initial. Le propriétaire de ce projet examine le code de la fork pullée et peut refuser éventuellement de l'intégrer.  \n\nQu’est-ce qu’une branche ?\nUne branche est une copie faite d'une application à un instant t. La branche permet de travailler sur l'application sans risque, puisqu'elle n'est qu'une copie. Elle permet aussi et surtout de développer de nouvelles fonctionnalités qui seront intégrées à l'application par la suite. Les membres d'une équipe travaillent donc chacun d'une branche de l'application, sans empiéter sur le travail des autres et sans être buggé par le travail des autres. \n\nQuelle est la différence entre une branche et un fork ? \nLa branche reste liée au projet, elle en est partie prenante tandis que la fork devient un projet à part entière.","__v":0}
{"_id":{"$oid":"5965e4bd0b42f3058c1ecb57"},"updatedAt":{"$date":"2017-07-12T09:23:37.528Z"},"createdAt":{"$date":"2017-07-12T08:58:37.825Z"},"title":"MEAN STACK","content":"Angular: \nFramework javascript front end qui s'inspire de l'architecture MVC. Angular est un langage de programmation indispensable dans le cadre de ce projet.\n\nAngular UI Router :\nModule front-end d'angular, ui-router est une alternative au ngRoute natif. Ui-router est plus complet et plus flexible que ce dernier. Comme son nom l'indique, il permet de gérer les routes entre les différentes 'views' d'angular. \nIndispensable.\n\nExpress: \nFramework back-end qui s'appuie sur nodejs, et qui permet notamment la gestion des routes. \nIndispensable.\n\nMongoose:  \nModule nodeJs, donc back-end, qui permet de contourner les limitations propres au BDD NoSQL en utilisant des « schémas » pour modéliser les données. \nIndispensable.\n\nJSONWebToken:\nC'est un standard ouvert (RFC 7519) pour échanger de l'information de manière sécurisée via un jeton signé. Par exemple un serveur pourrait émettre un jeton possédant l'affirmation \"utilisateur identifié en tant qu'administrateur\" et le fournir au client. Le client pourrait alors vérifier le jeton pour prouver que l'utilisateur est identifié en tant qu'administrateur. Cet outil est implémentée en back-end.\nFacultatif.\n\nPassport: \nMiddleware nodeJs, donc back-end, qui permet de gérer l'authentification dans une application, par l'utilisation notamment de JsonWebToken. \nFacultatif.\n \nMaterializeCSS: \nFramework front-end html/css qui permet de mettre en place un design dit 'material' (material design de Google). \nFacultatif\n\nBabel: \nModule back-end qui permet de compiler et minifier le code javascript.\nFacultatif.\n\nSCSS:\nSassy CSS est une version SASS qui s'approche fortement du CSS en terme de syntaxe. C'est un langage front end destiné à rationaliser les feuilles de style CSS.\nFacultatif.\n \nNodemon: \nPermet de relancer node automatiquement à chaque modification de l'application. \nFacultatif.\n\nLivereload: \nMoteur permet de rafraîchir le browser à chaque modification d'un fichier de l'application. S'applique également aux fichiers CSS.\nFacultatif.\n\nWebpack: \nModule front et back end qui permet de modulariser l'application dans son ensemble, pour peu qu'elle soit écrite en javascript. Facilite le déploiement de l'app et l'accès à ses ressources une fois déployée.\nFacultatif.","__v":0}
{"_id":{"$oid":"59662b80b6373017c77c550b"},"content":"Que sont les méthodes agiles ?\nOn connait les méthodes de gestion de projet prédictives et sequentielles qui consistent à tout anticiper, tout planifier du début jusqu'au livrable. \nCe type de méthode est très rigide, le moindre imprévu vient ruiner le scénario de départ.\nL'approche Agile donne davantage de visibilité, implique le client du début à la fin du projet et adopte un processus itératif et incrémental. \nC'est une approche des petits pas qui apporte beaucoup de souplesse et\npermet à l'équipe d'appréhender les imprévus avec sérénité.\nCette approche considère que le besoin initial ne peut être figé et propose au contraire de s'adapter aux changements de ce dernier.\nMais pas sans un minimum de règles. Et c'est là qu'intervient SCRUM. \n\n● Qu’est-ce que SCRUM ?\nC'est une de ces approches dites agiles, et dont voici les règles \u0026 def:\n\n● Définir le Product BackLog, de quoi est-il constitué ?\nc'est l'ensemble des exigences fonctionnelles et non fonctionnelles nécessaires au livrable.\n\n● Définir le Product Owner\nva porter la vision du produit à réaliser: \n- grosso modo, il rédige le cahier des charges et réalise le Product Backlog. \n- il effectue un tri en fonction de la valeur fonctionnelle de ces exigence ou de leur retour sur investissement. \n- il travaille en interaction avec l’équipe de développement. \n\n● Définir le SCRUM Master\nC'est le Chef d'orchestre, \nIl maîtrise Scrum et s’assurer que ce dernier est correctement appliqué. \nIl a un rôle de coach à la fois auprès du Product Owner / Equipe.\nIl fait preuve de pédagogie. \nIl s'assurer que l’équipe de développement est pleinement productive. \nRenoncer au style de management « commander et contrôler » pour adopter un mode de management participatif.\n\n● Définir la « Development team »\nElle transforme les besoins exprimés par le Product Owner en fonctionnalités utilisables: \nElle réalise le Sprint Backlog: un inventaire des tâches à effectuer pour convertir une exigence en fonctionnalité utilisable en fin de sprint.\nElle est pluridisciplinaire, et compte entre 3 et 9 personnes (on ne s'étalera pas sur ces restrictions). \n\n● Définir le Sprint, de quoi est-il constitué ?\nLe sprint est donc une période temps durant laquelle l'Equipe de développement va travailler sur une exigence du backlog en particulier, et dure entre 2 et 4 semaines. Lorsque cette exigence est transformée en fonctionnalité utilisable, elle devient un incrément. La somme des incréments créé le produit. \nEt c'est à cet égard que l'on parle de méthode itérative en évoquant SCRUM.\n\n● Définir le daily scrum\n\n● Qu’est-ce que la planification d’un sprint ?\n\n● Qu’est-ce que la révision d’un sprint ?\nUne revue de Sprint est tenue à la fin du Sprint pour inspecter l’incrément réalisé et adapter le Product Backlog si nécessaire. Pendant la réunion de revue de Sprint, l'Équipe Scrum et les parties prenantes échangent sur ce qui a été fait durant le Sprint. En se basant là-dessus, et en considérant les changements au Product Backlog effectués durant le Sprint, les participants collaborent pour déterminer les prochains items ayant le plus de valeur qui pourraient être faits. Cette réunion se veut informelle, pas une réunion de pilotage, et la présentation de l'incrément est destinée à susciter des réactions et à favoriser la collaboration.\nCette réunion est limitée à une boîte de temps de quatre heures pour un Sprint d’un mois. Pour les Sprints moins long, la revue de Sprint dure généralement moins longtemps. Le Scrum Master s’assure que la revue a lieu et que les participants en comprennent le but. Le Scrum Master apprend à tous comment respecter la boîte de temps.\n\n● Qu’est-ce que la rétrospective d’un sprint ?\nDure environ 45 min/semaine de sprint, et permet de faire le point sur les éléments positifs et les axes d'amélioration en vue du prochain sprint.\n\no Attention : en cours nous appelions « rétrospective » ce qui est en réalité la « révision du sprint » au sens de la méthodologie SCRUM. Nous n’avons pas réellement fait de rétrospective sur un sprint, essayez de trouver l’info en ligne sur la différence entre ces 2 notions (vous avez le droit au cours)\n\n● Pourquoi est-il important de définir la notion de « Done » pour les tâches ?\nElle permet de visualiser rapidement les ce qui a été effectué et ce qui ne l'a pas été. \n\n● La notion de « Done » peut-elle évoluer au cours d’un projet SCRUM ?\nDans une approche agile, le changement est non seulement autorisé mais encouragé afin de pouvoir éliminer les idées de départ qui s’avéreront mauvaises et de prendre en compte les nouvelles idées qui arriveront en cours de route. De fait, il arrive qu'une fonctionnalité classée \"done\" soit amenée à évoluer et basculer à nouveau dans une 'To Do' list. \n\n● SCRUM est-elle une méthodologie itérative ? \nVoir réponse à la question portant sur le sprint.","title":"SCRUM","__v":0}
